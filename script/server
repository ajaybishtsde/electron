#!/usr/bin/env node

'use strict';

const path = require('path');
const webpack = require('webpack');
const express = require('express');
const history = require('connect-history-api-fallback');
const {
    repositoryRootPath,
    nodeModulesPath,
    intermediateAppPath
} = require('./config');

const webpackConfig = require('../webpack.config')({
    rendererOnly: true,
    devServer: true
}, {
    mode: 'development'
});
const webpackCompiler = webpack(webpackConfig);

const app = express();

const devWare = require('webpack-dev-middleware')(webpackCompiler, {
    publicPath: webpackConfig.output.publicPath,
    stats: {
        colors: true
    }
});

app.use(devWare);

const hotWare = require('webpack-hot-middleware')(webpackCompiler);

app.use(hotWare);
app.use(express.static(intermediateAppPath));
/*
app.use(history({
    index: '/renderer.html',
    disableDotRule: true,
    verbose: true,
    rewrites: [
        // note: this is way more complicated than it should be because of how Electron treats paths between file:// and https://.
        // i.e. https => `/css/something.css` maps to `./app/css/something.css` but on `file://` maps to the root file-system folder.
        // ergo, since the best way to solve this is with relative paths, messy rewritting is required to use the history API.
        { from: /(\/(css|fonts|images|javascripts)\/[^.]+\.\w+(\.map)?)$/, to: ({ match }) => (match[1]) },
        { from: /(\/[^.\/]+?\.(html|js)+)$/, to: ({ match }) => (match[1]) }
    ]
}));
app.use(express.static(intermediateAppPath));
*/

app.listen(3200, function (err) {
    if (err) {
        return console.error(err);
    }
    console.log('Listening at http://localhost:3200/');
});